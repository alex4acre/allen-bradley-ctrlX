// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DIAGNOSIS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_DIAGNOSIS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct Diagnosis;
struct DiagnosisBuilder;
struct DiagnosisT;

struct DiagnosisT : public flatbuffers::NativeTable {
  typedef Diagnosis TableType;
  uint32_t mainDiagnosisCode = 0;
  uint32_t detailedDiagnosisCode = 0;
  std::string dynamicDescription{};
};

struct Diagnosis FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DiagnosisT NativeTableType;
  typedef DiagnosisBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAINDIAGNOSISCODE = 4,
    VT_DETAILEDDIAGNOSISCODE = 6,
    VT_DYNAMICDESCRIPTION = 8
  };
  uint32_t mainDiagnosisCode() const {
    return GetField<uint32_t>(VT_MAINDIAGNOSISCODE, 0);
  }
  bool mutate_mainDiagnosisCode(uint32_t _mainDiagnosisCode) {
    return SetField<uint32_t>(VT_MAINDIAGNOSISCODE, _mainDiagnosisCode, 0);
  }
  uint32_t detailedDiagnosisCode() const {
    return GetField<uint32_t>(VT_DETAILEDDIAGNOSISCODE, 0);
  }
  bool mutate_detailedDiagnosisCode(uint32_t _detailedDiagnosisCode) {
    return SetField<uint32_t>(VT_DETAILEDDIAGNOSISCODE, _detailedDiagnosisCode, 0);
  }
  const flatbuffers::String *dynamicDescription() const {
    return GetPointer<const flatbuffers::String *>(VT_DYNAMICDESCRIPTION);
  }
  flatbuffers::String *mutable_dynamicDescription() {
    return GetPointer<flatbuffers::String *>(VT_DYNAMICDESCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MAINDIAGNOSISCODE) &&
           VerifyField<uint32_t>(verifier, VT_DETAILEDDIAGNOSISCODE) &&
           VerifyOffset(verifier, VT_DYNAMICDESCRIPTION) &&
           verifier.VerifyString(dynamicDescription()) &&
           verifier.EndTable();
  }
  DiagnosisT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DiagnosisT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Diagnosis> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DiagnosisT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DiagnosisBuilder {
  typedef Diagnosis Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mainDiagnosisCode(uint32_t mainDiagnosisCode) {
    fbb_.AddElement<uint32_t>(Diagnosis::VT_MAINDIAGNOSISCODE, mainDiagnosisCode, 0);
  }
  void add_detailedDiagnosisCode(uint32_t detailedDiagnosisCode) {
    fbb_.AddElement<uint32_t>(Diagnosis::VT_DETAILEDDIAGNOSISCODE, detailedDiagnosisCode, 0);
  }
  void add_dynamicDescription(flatbuffers::Offset<flatbuffers::String> dynamicDescription) {
    fbb_.AddOffset(Diagnosis::VT_DYNAMICDESCRIPTION, dynamicDescription);
  }
  explicit DiagnosisBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Diagnosis> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Diagnosis>(end);
    return o;
  }
};

inline flatbuffers::Offset<Diagnosis> CreateDiagnosis(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t mainDiagnosisCode = 0,
    uint32_t detailedDiagnosisCode = 0,
    flatbuffers::Offset<flatbuffers::String> dynamicDescription = 0) {
  DiagnosisBuilder builder_(_fbb);
  builder_.add_dynamicDescription(dynamicDescription);
  builder_.add_detailedDiagnosisCode(detailedDiagnosisCode);
  builder_.add_mainDiagnosisCode(mainDiagnosisCode);
  return builder_.Finish();
}

inline flatbuffers::Offset<Diagnosis> CreateDiagnosisDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t mainDiagnosisCode = 0,
    uint32_t detailedDiagnosisCode = 0,
    const char *dynamicDescription = nullptr) {
  auto dynamicDescription__ = dynamicDescription ? _fbb.CreateString(dynamicDescription) : 0;
  return comm::datalayer::CreateDiagnosis(
      _fbb,
      mainDiagnosisCode,
      detailedDiagnosisCode,
      dynamicDescription__);
}

flatbuffers::Offset<Diagnosis> CreateDiagnosis(flatbuffers::FlatBufferBuilder &_fbb, const DiagnosisT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DiagnosisT *Diagnosis::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DiagnosisT>(new DiagnosisT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Diagnosis::UnPackTo(DiagnosisT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = mainDiagnosisCode(); _o->mainDiagnosisCode = _e; }
  { auto _e = detailedDiagnosisCode(); _o->detailedDiagnosisCode = _e; }
  { auto _e = dynamicDescription(); if (_e) _o->dynamicDescription = _e->str(); }
}

inline flatbuffers::Offset<Diagnosis> Diagnosis::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DiagnosisT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDiagnosis(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Diagnosis> CreateDiagnosis(flatbuffers::FlatBufferBuilder &_fbb, const DiagnosisT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DiagnosisT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _mainDiagnosisCode = _o->mainDiagnosisCode;
  auto _detailedDiagnosisCode = _o->detailedDiagnosisCode;
  auto _dynamicDescription = _o->dynamicDescription.empty() ? 0 : _fbb.CreateString(_o->dynamicDescription);
  return comm::datalayer::CreateDiagnosis(
      _fbb,
      _mainDiagnosisCode,
      _detailedDiagnosisCode,
      _dynamicDescription);
}

inline const comm::datalayer::Diagnosis *GetDiagnosis(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Diagnosis>(buf);
}

inline const comm::datalayer::Diagnosis *GetSizePrefixedDiagnosis(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Diagnosis>(buf);
}

inline Diagnosis *GetMutableDiagnosis(void *buf) {
  return flatbuffers::GetMutableRoot<Diagnosis>(buf);
}

inline bool VerifyDiagnosisBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Diagnosis>(nullptr);
}

inline bool VerifySizePrefixedDiagnosisBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Diagnosis>(nullptr);
}

inline void FinishDiagnosisBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Diagnosis> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDiagnosisBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Diagnosis> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::DiagnosisT> UnPackDiagnosis(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::DiagnosisT>(GetDiagnosis(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::DiagnosisT> UnPackSizePrefixedDiagnosis(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::DiagnosisT>(GetSizePrefixedDiagnosis(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_DIAGNOSIS_COMM_DATALAYER_H_
